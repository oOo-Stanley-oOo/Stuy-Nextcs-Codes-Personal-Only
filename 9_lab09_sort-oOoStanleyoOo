//Goal: To rearrange and sort blocks
//***** TEMPLATE USED! THIS IS NOT ENTIRELY WRITTEN BY STANLEY


/*======================
  Controls:
  s: shuffle blocks, reset
  r: create new blocks, reset
  o: create new blocks in increasing size order, reset
  space: toggle looping mode on/off
  any other key: move forward one step in the current sorting algorithm
  This program will not run draw continuously. By default it will
  only run draw on a keyPress event (other than s, r, o, or space).
  Hitting space will revert to nromal draw behavior, or toggle between
  the two states.
  ======================*/

//constants
int BUBBLE = 0;
int SELECTION = 1;
int INSERTION = 2;

int MIN_BLOCK_SIZE = 5;
int NUM_BLOCKS = 50;

color SORTED = #00FFFF;
color UNSORTED = 255;
color CURRENT = #FFFF00;
color TEST = #FF00FF;
color SMALLEST = #00FF00;

//Driver variables
BlockRow blocks;
boolean ordered;
boolean stepwise;

void setup() {
  size(600, 600);
  background(0);
  frameRate(10);

  ordered = false;
  stepwise = true;

  blocks = new BlockRow(NUM_BLOCKS, SELECTION, ordered);
  blocks.display();
  if (stepwise) {
    noLoop();
  }
}//setup

void draw() {
  background(0);
  blocks.display();
  displayInfo(0, 0);

  blocks.sort();
}//draw



void keyPressed() {
  if (key == 's') {
    blocks.shuffle();
  }//shuffle
  else if (key == 'r') {
    blocks.setupBlocks(false);
  }//reset
  else if (key == 'o') {
    blocks.setupBlocks(true);
  }//reset ordered
  if ( key == ' ') {
    stepwise = !stepwise;
    if (stepwise) {
      noLoop();
    }
    else {
      loop();
    }
  }
  if (stepwise) {
    redraw();
  }//look for next value
}//keyPressed


void displayInfo(int targetSize, int foundIndex) {
  fill(255);
  textSize(20);
  textAlign(LEFT, TOP);
  String s = "";
  text(s, 0, 0);
}//displayInfo
class Block {

  int cx, cy;
  int sideLength;
  color inside;

  Block(int x, int y, int sl) {
    sideLength = sl;
    inside = color(255);
    cx = x;
    cy = y;
  }//default constructor

  void move(int x, int y) {
    cx = x;
    cy = y;
  }//move

  void display() {
    fill(inside);
    square(cx, cy, sideLength);

    fill(0);
    if (sideLength >= 100) {
      textSize(75);
    }
    else {
      textSize(sideLength);
    }
    textAlign(LEFT, TOP);
    text(sideLength, cx, cy);
  }//display


}//Ball
class BlockRow {
  Block[] row;

  int numBlocks;
  int minBlockSize;
  int maxBlockSize;
  int algorithm;
  boolean sorted;
  int currentPos;
  int smallestPos;
  int testPos;

  //variables for bubble sort keep track of
  //start of the sorted portion
  //two test positions to compare
  int sortedStart;
  int testPos0;
  int testPos1;

  BlockRow(int nb, int algo, boolean orderd) {
    numBlocks = nb;
    minBlockSize = MIN_BLOCK_SIZE;
    algorithm = algo;
    sorted = ordered;

    setSortVars();

    row = new Block[numBlocks];
    setupBlocks(ordered);
  }//setup

  void setSortVars() {
  }//setSortVars

  void swap(int i0, int i1) {
  if (i0 > i1) {
  i0 = i1;
  i1 = i0;
  }
}//swap

  void sort() {
    if (algorithm == BUBBLE) {
      bubbleSortOnce();
    } 
     else if (algorithm == SELECTION) {
   selectionSortOnce();
    
}//selection sort

  }//bubble sort
  }//sort

  void bubbleSortOnce() {
    //if unsorted, keep going
    //if the sorted start is not at the beginning, there
    //is more sorting to do.
    if (UNSORTED) {

      //if we arent at the end of unsorted portion,
      //keep moving along
    
    if (NotAtEnd) {

        //if the 2 test values are out of order, swap!
        //when swapping values, don't forget to call rearrange()
      
    if (OutOfOrder) {

        }//bubbling

        //move our test values over

      }//Not at the end

      //if we reach the end of the unsorted position,
      //change our index variables appropriately.
      if (AtEndOfUnsortedArea) {
      }//reset
    }//still sorting
  }//bubbleSortOnce

void selectionSortOnce() {
  //if currentPos is at the end, done!
  if (UNSORTED) {

    //find smallest block in unsorted portion
    //how can we tell we are still looking for the smallest?
    if (LOOKINGFORSMALLEST) {

      //compare value at smallestPos to testPos
      if (FOUNDASMALLERVALUE) {
        //if value at testPos is smaller, update smallestPos

      }//test is smaller

      //move to the next element

    }//looking for smallest

    //found the smallest in the unsorted portion, swap!
    else {
      //don't forget to call rearrange() after swap


      //update sorting variables to prepare to
      //find the next smallest value

    }
  }//still sorting
}//selectionSortOnce

/*==================================
  LEAVE ALL OF THIS CODE ALONE.
  The code below this line is here to help
  run the program, it is all working, and
  does not need to be modified.
  ==================================*/


  void setupBlocks(boolean ordered) {
    maxBlockSize = 0;
    minBlockSize = MIN_BLOCK_SIZE;
    int topSize = 100;
    if (ordered) {
      topSize = 10;
    }
    for (int i=0; i < row.length; i++) {
      int bsize = int(random(minBlockSize, topSize));
      if (maxBlockSize < bsize) {
        maxBlockSize = bsize;
      }//keep maxBlockSize up to date
      row[i] = new Block(0, 0, bsize);
      if (ordered) {
        minBlockSize = bsize;
        topSize = minBlockSize+5;
      }//keep things ordered
    }//array loop
    rearrange();
    setSortVars();
  }//setupBlocks

  void rearrange() {
    int x = 5;
    int y = 25;
    int topSize = 0;
    for (int i=0; i < row.length; i++) {
      if (topSize < row[i].sideLength) {
        topSize = row[i].sideLength;
      }//update topSize
      if (x + row[i].sideLength >= width) {
        x = 5;
        y+= topSize + 5;
      }//new row
      row[i].move(x, y);
      x+= row[i].sideLength +2;
    }//array loop
  }//rearrange

  void display() {
    for (int i=0; i < row.length; i++) {
      if (algorithm == BUBBLE) {
        setBubbleColor(i);
      }//bubble sort color
      else if (algorithm == SELECTION) {
        setSelectionColor(i);
      }//selection sort coloring
      else if (algorithm == INSERTION) {
        setInsertionColor(i);
      }//insertion sort coloring
      row[i].display();
    }//array loop
  }//viewBlocks

void setBubbleColor(int i) {
  color c;
  if (i >= sortedStart) {
    c = SORTED;
  }//sorted color
  else if (i == testPos0) {
    c = CURRENT;
  }//test color
  else if (i == testPos1) {
    c = TEST;
  }//test color
  else {
    c = UNSORTED;
  }//unsorted color
  row[i].inside = c;
}//setBubbleColor

void setSelectionColor(int i) {
  color c;
  if (i < currentPos) {
    c = SORTED;
  }//sorted color
  else if (i == currentPos) {
    c = CURRENT;
  }//test color
  else if (i == testPos) {
    c = TEST;
  }//test color
  else if (i == smallestPos) {
    c = SMALLEST;
  }//smallest color
  else {
    c = UNSORTED;
  }//unsorted color
  row[i].inside = c;
}//setBubbleColor

void setInsertionColor(int i) {
  color c;
  int newValue = -1;
  int sortedEnd = -1;
  if (i == newValue) {
    c = SMALLEST;
  }//test color
  else if (i <= sortedEnd) {
    c = SORTED;
  }//sorted color
  else {
    c = UNSORTED;
  }//unsorted color
  row[i].inside = c;
}//setBubbleColor

  void shuffle() {
    for (int i=0; i<row.length; i++) {
      int i0 = int(random(0, row.length));
      int i1 = int(random(0, row.length));
      swap(i0, i1);
    }//array loop
    rearrange();
    setSortVars();
    ordered = false;
  }//shuffle

  int getSize(int i) {
    if (i < row.length && i >= 0) {
      return row[i].sideLength;
    }//valid index
    return -1;
  }//getSize

  void setColor(int i, color c) {
    row[i].inside = c;
  }//setColor
}//BlockRow
