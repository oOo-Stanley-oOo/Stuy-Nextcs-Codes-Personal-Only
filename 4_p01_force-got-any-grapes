//Goal: To show different types of forces on orbs
//Press 1, 2, 3, 4, or 5 to view different types of forces


//Driver File
float GRAVITY = 1;
float MAX_SIZE = 50;
float MIN_SIZE = 50;
float MAX_MASS = 10;
float MIN_MASS = 1;
float DAMPENING = 0.998;
float SPRING_CONST = 0.005;
int SPRING_LENGTH = 100;
boolean showOrbs = false;

int NUM_ORBS = 3;
Orb[] orbs;

void setup() {
  noStroke();
  size(600, 600);
  background(200);
  orbs = new Orb[NUM_ORBS];
  resetOrbs();
}

void draw() {
  background(200);
  if (key == '3') {
    updateOrbCollisions();
  }
  for (int i = 0; i < orbs.length; i++) {
    orbs[i].applyGravity();
    orbs[i].update();
    orbs[i].display();
  }
  if (showOrbs) {
    for (int i = 0; i < orbs.length; i++) {
      orbs[i].applyGravity();
      orbs[i].update();
      orbs[i].display();
    }
  }
}

void resetOrbs() {
  float spacing = width / (NUM_ORBS + 1);
  for (int i = 0; i < orbs.length; i++) {
    float x = (i + 1) * spacing;
    float y = 50;
    orbs[i] = new Orb(x, y, random(MIN_SIZE, MAX_SIZE), random(MIN_MASS, MAX_MASS));
  }
}

void keyPressed() {
  if (key == '1' || key == '2' || key == '4') {
    showOrbs = true;
    orbs = new Orb[NUM_ORBS];
    resetOrbs();
    for (int i = 0; i < orbs.length; i++) {
      orbs[i].applyGravity();
    }
  } 
  
  if (key == 'r') {
    resetOrbs();
  }
  if (key == '2') {
    resetOrbs();
    orbs[0].attachTo(orbs[1]);  
    orbs[2].attachTo(orbs[1]); 
  }
  if (key == '3') {
    resetOrbs();
    orbs[0].setFixed(false);  
    orbs[0].setVelocity(100); 
  }
  if (key == '4') {
    resetOrbs();
  }
  if (key == '5') {  
    resetOrbs();
    showOrbs = true;
    orbs[0].attachTo(orbs[1]); 
    orbs[2].attachTo(orbs[1]); 
    orbs[0].setFixed(false);  
    orbs[0].setVelocity(100); 
    for (int i = 0; i < orbs.length; i++) {
      orbs[i].applyGravity();
    }
  }
}
//==================================================================Applied Force
void updateOrbCollisions() {
  for (int i = 0; i < orbs.length - 1; i++) {
    Orb orbA = orbs[i];
    Orb orbB = orbs[i + 1];
    
    if (orbA.position.x + orbA.size / 2 >= orbB.position.x - orbB.size / 2) {
      orbA.setVelocity(50); 
      orbB.setVelocity(50); 
      if (i == 1) {
        orbs[0].setVelocity(25); 
        orbs[1].setVelocity(25);
        orbs[2].setVelocity(25); 
      }
    }
  }
class Orb {
  PVector position;
  PVector velocity;
  PVector acceleration;
  float size;
  float mass;
  color c;
  boolean fixed;
  Orb attachedTo;

  Orb(float x, float y, float size, float mass) {
    position = new PVector(x, y);
    velocity = new PVector(0, 0);
    acceleration = new PVector(0, 0);
    this.size = size;
    this.mass = mass;
    c = color(random(256), random(256), random(256));
    fixed = false;
    attachedTo = null;
  }

  void applyGravity() {
    acceleration.y += GRAVITY;
  }
  
  void setFixed(boolean value) {
    fixed = value;
  }

  void attachTo(Orb other) {
    attachedTo = other;
  }
  
  void setVelocity(float speed) {
    velocity.x = speed / 60.0;
  }
  

void update() {
  if (!fixed) {
    if (attachedTo != null) {
      PVector force = PVector.sub(attachedTo.position, position);
      float distance = force.mag();
      float displacement = distance - SPRING_LENGTH;
      force.normalize();
      force.mult(SPRING_CONST * displacement);
//==================================================================Applied Force
      if (key == '3' && getIndex() == 0) {
        position.x += 40.0 / 60.0; 
      }
                  
      if (getIndex() == 0 && orbs[0].position.x + orbs[0].size / 2 >= orbs[1].position.x - orbs[1].size / 2) {
        orbs[0].setVelocity(20);
        orbs[1].setVelocity(20);
      }

      if (getIndex() == 1 && orbs[1].position.x + orbs[1].size / 2 >= orbs[2].position.x - orbs[2].size / 2) {
        orbs[0].setVelocity(10);
        orbs[1].setVelocity(10);
        orbs[2].setVelocity(10);
      }

      acceleration.set(force);
    }
  
  else {
    if (key != '1' && key != '5') {
      acceleration.set(0, 0);
    }
  }
//==================================================================End Applied Force

    if (key == '1') {
      acceleration.y = GRAVITY;  
    } 
//==================================================================Electromagnetic Force
    if (key == '4' && getIndex() != 1) {
      float targetX = orbs[1].position.x;
      float targetY = orbs[1].position.y;

      PVector direction = PVector.sub(new PVector(targetX, targetY), position);
      direction.normalize();

      float distanceToTarget = PVector.dist(position, new PVector(targetX, targetY));
      float threshold = (size + orbs[1].size) / 2;

      if (distanceToTarget > threshold) {
        acceleration.add(direction.mult(0.2));
      } else {
        velocity.set(0, 0);
        acceleration.set(0, 0);
      }
    }
//==================================================================End Electromagnetic
    velocity.add(acceleration);
    velocity.mult(DAMPENING);
    position.add(velocity);

    if (position.y >= height - size / 2) {
      position.y = height - size / 2;
      velocity.y *= -1;
    }
    if (key == '1') {  
      textSize(14);
      text("[[GRAVITY]], SPRING, APPLIED, ELECTROMAGNETIC, COMBINATION",200,15);
    }
    if (key == '2') {  
      textSize(14);
      text("GRAVITY, [[SPRING]], APPLIED, ELECTROMAGNETIC, COMBINATION",200,15);
    }
    if (key == '3') {
      textSize(14);
      text("GRAVITY, SPRING, [[APPLIED]], ELECTROMAGNETIC, COMBINATION",200,15);
    }
    if (key == '4') { 
      textSize(14);
      text("GRAVITY, SPRING, APPLIED, [[ELECTROMAGNETIC]], COMBINATION",200,15);
    }
    if (key == '5') {  
      textSize(14);
      text("GRAVITY, SPRING, APPLIED, ELECTROMAGNETIC, [[COMBINATION]]",200,15);
    }
  }
}

  int getIndex() {
    for (int i = 0; i < orbs.length; i++) {
      if (this == orbs[i]) {
        return i;
      }
    }
    return -1;
  }



  void display() {
    fill(c);
    circle(position.x, position.y, size);
    if (key == '4') {
    textSize(20);
    textAlign(CENTER, CENTER);
//==================================================================Electromagnetic Force    
    if (getIndex() == 0 || getIndex() == 2) {
      fill(0);
      text("-", position.x, position.y);
    }
    
    if (getIndex() == 1) {
      fill(0);
      text("+", position.x, position.y);
    }
  }
    if (attachedTo != null) {
      color(random(0, 255));
      stroke(5);
      line(position.x, position.y, attachedTo.position.x, attachedTo.position.y);
    }
  }
}
