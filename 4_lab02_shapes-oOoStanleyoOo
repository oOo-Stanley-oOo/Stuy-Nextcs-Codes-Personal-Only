//Goal: To display and regenerate "PathShape" objects
//***** TEMPLATE USED! THIS IS NOT ENTIRELY WRITTEN BY STANLEY

/*===========================
  When run, this program will display a 4x4 grid
  of different PathShape objects.

  Hitting the spacebar will generate a new set of
  PathShape Objects.

  You do not need to modify this driver file at all.
  =========================*/

int PATH = 0;
int TRIANGLE = 1;
int POLYGON = 2;
int REGULAR = 3;
int POPULATION_SIZE = 16;
int MAX_SIZE = 100;
int MAX_POINTS = 12;

ShapeGrid g;


void setup() {
  size(500, 500);
  g = new ShapeGrid(5, 5, MAX_SIZE, MAX_POINTS);
  g.display();
}//setup

void draw() {
  background(0);
  g.display();
}//draw

void keyPressed() {
  if (key == ' ') {
    g.makeShapes();
  }
}//keyPressed
/*===========================
  PathShape
  Class to represent a shape made up of a collection of vertices.
  This is the same class we have been working on with the following additions:
  Instance Variables:
  Point corner:
    Represents the upper-left corner of the region the
    vertices of the shape should be within.
    int shapeWidth, int shapeHeight
      The size of the region that the shape should be contained within.
  Methods to work on:
    0. isValidShape
  =========================*/


class PathShape {

  Point[] vertices; //vertext coordinates
  int numPoints; //number of points for a "complete" shape
  int setPoints; //current number of points added to vertices

  color inside;
  color border;

  Point centroid;
  float area;

  Point corner;
  int shapeWidth;
  int shapeHeight;

  /*===========================
    np Constructor
    Initializes the instance vairables.
    You do not need to modify this method.
    =========================*/
  PathShape(int np) {
    numPoints = np;
    setPoints = 0;
    vertices = new Point[numPoints];
    inside = 255;
    border = 0;
    centroid = new Point(0, 0);
    area = 0;
    corner = new Point(0, 0);
    int shapeWidth = width;
    int shapeHeight = height;
  }//default contructor

  /*===========================
    polygon Constructor
    Initializes the instance vairables.
    Calls makeRandomClosedPolygon()
    You do not need to modify this method.
    =========================*/
  PathShape(int np, Point center, int minRadius, int maxRadius) {
    this(np);
    corner.x = center.x - maxRadius;
    corner.y = center.y - maxRadius;
    shapeWidth = maxRadius * 2;
    shapeHeight = maxRadius * 2;
    makeRandomClosedPolygon(center, minRadius, maxRadius);
  }//random closed polygon constructor

  /*===========================
    random vertex Constructor
    Initializes the instance vairables.
    Calls makeRandomVertices()
    You do not need to modify this method.
    =========================*/
  PathShape (int np, int minX, int minY, int maxX, int maxY) {
    this(np);
    corner.x = minX;
    corner.y = minY;
    shapeWidth = maxX - minX;
    shapeHeight = maxY - minY;
    makeRandomVertices(minX, minY, maxX, maxY);
  }//random constructor


  /*===========================
    isValidShape()
    Returns true if the centroid is within the shapeWidth x shapeHeight
    rectangle with an upper-left corner at corner.
    =========================*/
  boolean isValidShape() {
  return centroid.x >= corner.x && centroid.x <= corner.x + shapeWidth &&
         centroid.y >= corner.y && centroid.y <= corner.y + shapeHeight;
}




  /*===========================
    addPoint()
    You do not need to modify this method.
    =========================*/
  void addPoint(int x, int y) {
    if (setPoints < numPoints) {
      vertices[setPoints] = new Point(x, y);
      setPoints++;
    }//add point if there's room
  }//addPoint

  /*===========================
    addPoint()
    You do not need to modify this method.
    =========================*/
  void addPoint(Point p) {
    if (setPoints < numPoints) {
      vertices[setPoints] = p;
      setPoints++;
    }//add point if there's room
    setArea();
    setCentroid();
  }//addPoint

  /*===========================
    display
    You do not need to modify this method.
    =========================*/
  void display() {
    fill(inside);
    stroke(border);
    beginShape();
    for (int p=0; p < setPoints; p++) {
      vertex(vertices[p].x, vertices[p].y);
    }//loop over vertices
    endShape(CLOSE);
    noStroke();
    fill(255, 255, 0);
    circle(centroid.x, centroid.y, 5);
  }//display

  /*===========================
    makeRandomVertices()
    You do not need to modify this method.
    =========================*/
  void makeRandomVertices(int minX, int minY, int maxX, int maxY) {
    for(int p=0; p < numPoints; p++) {
      addPoint(new Point(minX, minY, maxX, maxY));
    }//generate points loop
    setArea();
    setCentroid();
  }//makeRandomVertices

  /*===========================
    makeRandomClosedPolygon
    You do not need to modify this method.
    =========================*/
  void makeRandomClosedPolygon(Point center, int minRadius, int maxRadius) {
    for(int p=0; p < numPoints; p++) {
      float theta = radians((float(p)/numPoints) * 360);
      int r = int(random(minRadius, maxRadius));
      int x = int(r * cos(theta)) + center.x;
      int y = int(r * sin(theta)) +  center.y;
      addPoint(x, y);
    }//generate points loop
    setArea();
    //shapes made this way already have a defined center
    centroid = center;
  }//makeRandomClosedPolygon

  /*===========================
    setArea
    You do not need to modify this method.
    =========================*/
  void setArea() {
    area = 0;
    for (int i=0; i < setPoints; i++) {
      Point p0 = vertices[i];
      Point p1;
      //use point 0 if at the end of the list.
      if (i == setPoints - 1) {
        p1 = vertices[0];
      }
      else {
        p1 = vertices[i+1];
      }
      area+= (p0.x * p1.y) - (p1.x * p0.y);
    }//loop over points
    area = area / 2;
  }//setArea

  /*===========================
    setCentroid*()
    You do not need to modify this method.
    =========================*/
  void setCentroid() {
    int sumX = 0;
    int sumY = 0;
    for (int i=0; i < setPoints; i++) {
      Point p0 = vertices[i];
      Point p1;
      //use point 0 if at the end of the list.
      if (i == setPoints - 1) {
        p1 = vertices[0];
      }
      else {
        p1 = vertices[i+1];
      }
      sumX += (p0.x + p1.x) * ((p0.x * p1.y) - (p1.x * p0.y));
      sumY += (p0.y + p1.y) * ((p0.x * p1.y) - (p1.x * p0.y));
    }

    centroid.x = int(sumX / (6*area));
    centroid.y = int(sumY / (6*area));
  }//setCentroid

}//PathShape
class Point {

  int x;
  int y;

  Point() {
    x = 0;
    y = 0;
  }//default constructor

  //constructor
  Point(int _x, int _y) {
    x = _x;
    y = _y;
  }//

  //Random Constructor
  Point (int minX, int minY, int maxX, int maxY) {
    x = int(random(minX, maxX));
    y = int(random(minY, maxY));
  }//random constructor

  String toString() {
    String s = "(" + x + ", " + y + ")";
    return s;
  }//toString

}//Point
/*===========================
  class Polygon

  You do not need to modify this class.
  =========================*/

class Polygon extends PathShape {

  Polygon(int np, Point c, int minRadius, int maxRadius) {
    super(np, c, minRadius, maxRadius);
  }//Polygon

}//Polygon
/*===========================
  class Polygon

  You do not need to modify this class.
  =========================*/

class RegularGon extends Polygon {
  int radius;

  RegularGon(int np, Point c, int r) {
    super(np, c, r, r);
    radius = r;
  }//constructor

}//RegularGon
/*===========================
  ShapeGrid
  Stores a 2D array of PathShape Objects.
  Each individual PathShape can be a PathShape or
  an object that is a subclass of PathShape.
  Each PathShape should fit in a square region.
  Methods to work on:
    0. void makeShapes()
  =========================*/

class ShapeGrid {

  PathShape[][] grid; //the grid of PathShapes
  int shapeSize; //max size of each shape
  int maxPoints; //max points for each shape


  /*===========================
    Constructor
    Initializes the instance vairables, calls makeShapes()
    You do not need to modify this method.
    =========================*/
  ShapeGrid(int numRows, int numCols, int s, int mp) {
    grid = new PathShape[numRows][numCols];
    maxPoints = mp;
    shapeSize = s;
    makeShapes();
  }//constructor

  /*===========================
    makeShapes()
    Creates a new shape for each element in grid.
    The type of shape should be randomly chosen.
    All shapes should fit within a shapeSize x shapeSize square,
    where the x and y values provided below represent the uper-left
    corner.
    If the shape is a Polygon or RegularGon, the center should be
    the center of the current section of the screen being populated.
    If the shape is not a Triangle, the number of points should
    be a random number in the range [3, maxPoints).
    If the shape is a Polygon, the range of radii should be
    [10, shapeSize/2),
    If the shape is a RegularGon, the radius should be a random
    number in the range [10, shapeSize/2)
    If the value of isValidShape() is true, set the insdie color
    to green.
    If the value of isValidShape() is false, set the insdie color
    to red.
    =========================*/
  void makeShapes() {
  int x = 0;
  int y = 0;
  for (int r = 0; r < grid.length; r++) {
    for (int c = 0; c < grid[r].length; c++) {
      int type = int(random(4)); //select a random shape type, use the constants from ShapeDriver
      int centerX = x + shapeSize / 2;
      int centerY = y + shapeSize / 2;
/*
      if (type == lab02_shapes.RECTANGLE) {
        grid[r][c] = new Rectangle(x, y, shapeSize, shapeSize);
      } else if (type == lab02_shapes.CIRCLE) {
        int diameter = int(random(10, shapeSize));
        grid[r][c] = new Circle(centerX, centerY, diameter);
      } else if (type == lab02_shapes.POLYGON) {
        int numPoints = int(random(3, maxPoints));
        int radius = int(random(10, shapeSize / 2));
        grid[r][c] = new Polygon(centerX, centerY, numPoints, radius);
      } else if (type == lab02_shapes.REGULAR_GON) {
        int numSides = int(random(3, maxPoints));
        int radius = int(random(10, shapeSize / 2));
        grid[r][c] = new RegularGon(centerX, centerY, numSides, radius);
      }

      if (grid[r][c].isValidShape()) {
        grid[r][c].setFillColor(color(0, 255, 0));
      } else {
        grid[r][c].setFillColor(color(255, 0, 0));
      }
*/
      x += shapeSize;
    } // cols
    y += shapeSize;
    x = 0;
  } // rows
} // makeShapes()



  void display() {
    for (int r=0; r < grid.length; r++) {
      for (int c=0; c < grid[r].length; c++) {
   //     grid[r][c].display();
      }
    }
  }//display

}//ShapeGrid
/*===========================
  Triangle
  Methods to override
    0. setCentroid
      The coordinates of the centroid of a triangle can be found
      by taking the average of the coordinates of its vertices.
      Write an overriding setCentroid that uses this method to
      find the Triangle's centroid.
    1. isValidShape
      A valid Triangle is one with an area greater than 10
  =========================*/

class Triangle extends PathShape {

  Triangle() {
    super(3);
  }//default constructor

  Triangle(Point center, int minRadius, int maxRadius) {
    super(3, center, minRadius, maxRadius);
  }//random constructor

  Triangle(int minX, int minY, int maxX, int maxY) {
    super(3, minX, minY, maxX, maxY);
  }//other random constructor

  void setCentroid() {
    int x = 0;
    int y = 0;
    for (int i = 0; i < vertices.length; i++) {
      x += vertices[i].x;
      y += vertices[i].y;
    }
    centroid = new Point(x/3, y/3);
  }
  
  boolean isValidShape() {
    double a = vertices[0].distance(vertices[1]);
    double b = vertices[1].distance(vertices[2]);
    double c = vertices[2].distance(vertices[0]);
    double s = (a + b + c) / 2.0;
    double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));
    return area > 10;
  }

}//Triangle
